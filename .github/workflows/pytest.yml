name: pytest

on: [pull_request, push]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        environment-type: [conda, bare]
        include:
          - suffix: -min
            python-version: 3.6
            environment-type: conda
            os: ubuntu-latest
        exclude:
          - os: macos-latest
            environment-type: conda
          - os: windows-latest
            environment-type: bare

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}${{ matrix.suffix }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up environment variables
        run: |
          RAW_PYVERSION="${{ matrix.python-version }}"
          STRIPPED_PYVERSION=$(echo $RAW_PYVERSION | sed 's/\.//')
          echo "STRIPPED_PYVERSION=$STRIPPED_PYVERSION" >> $GITHUB_ENV

      - name: Create conda environment
        if: matrix.environment-type == 'conda'
        env:
          REQUIREMENTS: ci/requirements-py${{ env.STRIPPED_PYVERSION }}${{ matrix.suffix }}.yml
        run: conda env create --quiet --file $REQUIREMENTS

      - name: Create bare environment
        if: matrix.environment-type == 'bare'
        env:
          REQUIREMENTS: pip install pytest pytest-cov pytest-mock requests-mock pytest-timeout pytest-rerunfailures pytest-remotedata
        run: |
          pip install $REQUIREMENTS
          pip install .

      - name: Run tests
        run: pytest pvlib --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.environment-type == 'conda'
        uses: codecov/codecov-action@v2
        with:
          directory: ./coverage/reports/
          fail_ci_if_error: true
          verbose: true
